// admin_data/subjects.js

import { ApiService, SubjectService } from '../../services/api.js';

export const subjects = {
    template: `
        <div class="component-wrapper">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2>Subjects</h2>
                <button class="btn btn-primary" @click="openModal">
                    <i class="fas fa-plus"></i> Add Subject
                </button>
            </div>

            <!-- Search -->
            <div class="search-bar mb-4">
                <div class="input-group">
                    <input 
                        type="text" 
                        class="form-control" 
                        v-model="searchQuery"
                        placeholder="Search subjects..."
                    >
                </div>
            </div>

            <!-- Subjects Table -->
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Description</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr v-for="subject in filteredSubjects" :key="subject.id">
                            <td>{{ subject.name }}</td>
                            <td>{{ subject.description }}</td>
                            <td>
                                <button class="btn btn-sm btn-outline-primary me-2" @click="editSubject(subject)">
                                    <i class="fas fa-edit"></i>
                                </button>
                                <button class="btn btn-sm btn-outline-danger" @click="deleteSubject(subject.id)">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>

            <!-- Modal -->
            <div class="modal fade" id="subjectModal" tabindex="-1">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">{{ isEditing ? 'Edit Subject' : 'Add Subject' }}</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                        </div>
                        <div class="modal-body">
                            <form @submit.prevent="saveSubject">
                                <div class="mb-3">
                                    <label class="form-label">Subject Name</label>
                                    <input type="text" class="form-control" v-model="currentSubject.name" required>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Description</label>
                                    <textarea class="form-control" v-model="currentSubject.description" rows="3"></textarea>
                                </div>
                                <button type="submit" class="btn btn-primary w-100">Save Changes</button>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    `,
    data() {
        return {
            subjects: [],
            currentSubject: {
                id: null,
                name: '',
                description: ''
            },
            isEditing: false,
            searchQuery: '',
            loading: false,
            error: null,
            modalInstance: null
        };
    },
    computed: {
        filteredSubjects() {
            if (!this.searchQuery) return this.subjects;
            const query = this.searchQuery.toLowerCase();
            return this.subjects.filter(subject => 
                subject.name.toLowerCase().includes(query) ||
                subject.description?.toLowerCase().includes(query)
            );
        }
    },
    methods: {
        
        openModal() {
            this.isEditing = false;
            this.currentSubject = { id: null, name: '', description: ''};
            new bootstrap.Modal(document.getElementById('subjectModal')).show();
        },
        editSubject(subject) {
            this.isEditing = true;
            this.currentSubject = { ...subject };
            new bootstrap.Modal(document.getElementById('subjectModal')).show();
        },
        closeModal() {
            this.modalInstance?.hide();
            this.resetForm();
        },

        resetForm() {
            this.currentSubject = { id: null, name: '', description: '' };
            this.isEditing = false;
            this.error = null;
        },

        // CRUD operations
        async fetchSubjects() {
            this.loading = true;
            this.error = null;
        
            try {
                this.subjects = await SubjectService.getAll();
            } catch (error) {
                this.error = 'Unable to load subjects. Please try again later.';
                console.error('Subject fetch error:', error);
            } finally {
                this.loading = false;
            }
        },

        async saveSubject() {
            this.error = null;
            
            try {
                const savedSubject = this.isEditing
                    ? await SubjectService.update(this.currentSubject)
                    : await SubjectService.create(this.currentSubject);

                // Update local state
                if (this.isEditing) {
                    const index = this.subjects.findIndex(s => s.id === this.currentSubject.id);
                    if (index !== -1) {
                        this.subjects.splice(index, 1, savedSubject);
                    }
                } else {
                    this.subjects.push(savedSubject);
                }

                this.closeModal();
                this.showNotification('success', `Subject successfully ${this.isEditing ? 'updated' : 'created'}`);
            } catch (error) {
                const action = this.isEditing ? 'update' : 'create';
                this.error = `Failed to ${action} subject: ${error.message}`;
                console.error(`Subject ${action} error:`, error);
            }
        },

        editSubject(subject) {
            this.isEditing = true;
            this.currentSubject = { ...subject }; // Create a copy to avoid direct mutation
            this.openModal();
        },

        async deleteSubject(id) {
            if (!confirm('Are you sure you want to delete this subject? This action cannot be undone.')) {
                return;
            }

            try {
                await SubjectService.delete(id);
                this.subjects = this.subjects.filter(s => s.id !== id);
                this.showNotification('success', 'Subject successfully deleted');
            } catch (error) {
                this.showNotification('error', `Failed to delete subject: ${error.message}`);
                console.error('Subject deletion error:', error);
            }
        },

        // Utility methods
        showNotification(type, message) {
            // Implement your notification system here
            // Example using bootstrap toast or alert:
            console.log(`${type.toUpperCase()}: ${message}`);
            // You could emit an event for parent component to handle notifications
            this.$emit('notification', { type, message });
        }
        
    },
    mounted() {
        this.fetchSubjects();
    },
    beforeUnmount() {
        // Cleanup
        this.modalInstance?.dispose();
    }
};
